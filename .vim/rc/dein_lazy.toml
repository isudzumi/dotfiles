[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
on_source = ['unite.vim', 'vimshell.vim']

[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = "has('lua') && !has('nvim')"
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
    "Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
      " For no inserting <CR> key.
      "return pumvisible() ? "\<C-y>" : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

    " AutoComplPop like behavior.
    "let g:neocomplete#enable_auto_select = 1

    " Shell like behavior(not recommended).
    "set completeopt+=longest
    "let g:neocomplete#enable_auto_select = 1
    "let g:neocomplete#disable_auto_complete = 1
    "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
    "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_add = '''
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    imap <expr><TAB> neosnippet#expandable() <Bar><bar> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>" 
    smap <expr><TAB> neosnippet#expandable() <Bar><bar> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    let g:neosnippet#snippets_directory = '~/.vim/rc/'
'''

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends='unite.vim'
on_if = "isdirectory(bufname('%'))"

# python

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
if = "has('conceal') && (has('python') || has('python3')) && !has('nvim')"
hook_add = '''
    if !dein#tap('jedi-vim') 
        s:jedi_vim_dir = g:rc_dir + expand('../dein/repos/github.com/davidhalter/jedi-vim')
        call system("git --work-tree=s:jedi_vim_dir submodule update --init")
    endif
    autocmd FileType python setlocal omnifunc=jedi#completions
    let g:jedi#completions_enabled = 0
    let g:jedi#auto_vim_configuration = 0
'''

# javascript

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = 'javascript'
hook_add = '''
    let g:user_emmet_mode = 'iv'
    let g:user_emmet_leader_key = '<C-Y>'
    let g:use_emmet_complete_tag = 1
    let g:user_emmet_settings = {
        \ 'lang' : 'ja',
        \ 'html' : {
        \   'filters' : 'html',
        \ },
        \ 'css' : {
        \   'filters' : 'fc',
        \ },
        \}

    augroup EmmitVim
        autocmd!
        autocmd FileType * let g:user_emmet_settings.indentation = '  '[:&tabstop]
    augroup END

'''

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'MaxMEllon/vim-jsx-pretty'
on_ft = 'javascript'

# C++

[[plugins]]
repo = 'justmao945/vim-clang'
on_ft = 'cpp'
if = "executable('clang')"
hook_add = '''
    let g:clang_c_options = '-std=c11'
    let g:clang_cpp_options = '-std=c++1z'
    let g:clang_format_auto = 1
    let g:clang_format_style = 'Google'
    let g:clang_check_syntax_auto = 1
'''

# syntax check

[[plugins]]
repo = 'w0rp/ale'
if = "has('job') && has('channel') && has('timers')"
hook_add = '''
    let g:ale_fixers = {
    \   'javascript' : ['eslint'],
    \   'cpp' : ['cpplint'],
    \ }
    let g:ale_lint_on_text_changed = 0
'''

# rust

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
if = "executable('rustfmt')"
hook_add = '''
    let g:rustfmt_autosave = 1
    let g:rustfmt_command = 'rustfmt'
    let g:rustc_path = expand("$HOME/.cargo/bin/rustc")
'''

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'
if = "executable('racer')"
hook_add = '''
    if has('win32') || has('win64')
        set hidden
        let g:racer_cmd = expand("$HOME/.cargo/bin/racer")
        let $RUST_SRC_PATH = expand("$HOME/.rustup/toolchains/stable-x86_64-pc-windows-msvc/lib/rustlib/src/rust/src/")
    endif
'''

# toml

repo = 'cespare/vim-toml'
on_ft = 'toml'

# markdown

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_add = '''
    let g:vim_markdown_folding_level = 3
    let g:vim_markdown_folding_disabled = 1
    let g:vim_markdown_no_default_key_mappings = 1
    set nofoldenable
'''

[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'markdown'
hook_add = '''
    let g:previm_open_cmd = 'start'
    nnoremap <silent> <C-p> :PrevimOpen<CR>
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = 'toml'
